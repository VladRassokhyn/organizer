{"version":3,"sources":["lib/actionTypes.ts","lib/todo-reducer.ts","lib/store.ts","lib/actions.ts","Components/TodoPage/AddTodoForm.tsx","lib/hooks.ts","Components/TodoPage/SingleTodo.tsx","Components/TodoPage/SortTodoButton.tsx","Components/TodoPage/TodoListPage.tsx","lib/routes.jsx","Components/MainContainer.tsx","Components/index.tsx","index.js"],"names":["ADD_TODO","REMOVE_TODO","EDIT_TODO","CLOSE_TODO_SUB_MENU","OPEN_TODO_SUB_MENU","OPEN_TODO_EDIT_MODE","CLOSE_TODO_EDIT_MODE","SORT_TODO_BY","FINISH_TODO","initialState","todos","finishedTodos","todoReducer","state","action","type","actionTypes","id","length","text","importance","isOpenSubMenu","isEditMode","lastEditDate","Date","now","filter","t","map","sortType","sortedTodos","sort","a","b","reverse","todo","find","rootReducers","combineReducers","store","createStore","closeTodoSubMenu","AddTodoForm","useState","radioValue","setRadioValue","openError","setOpenError","formText","setFormText","dispatch","useDispatch","handleChange","event","target","value","onSubmit","props","handleSubmit","Grid","container","direction","justify","alignItems","item","xs","TextField","name","fullWidth","variant","multiline","onChange","e","label","Button","onClick","style","width","color","size","className","FormControl","component","RadioGroup","row","FormControlLabel","control","Radio","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","reason","message","Fragment","IconButton","aria-label","fontSize","useSelector","untypedSelector","SingleTodo","time","importanceColor","ListItem","button","ListItemIcon","ListItemText","primary","getDay","getMonth","getFullYear","getHours","getMinutes","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","disablePadding","SortTodoButton","isFirstClick","setIsFirstClick","sortTodoBy","a11yProps","index","useStyles","makeStyles","theme","createStyles","root","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","routes","path","classes","useTheme","React","setValue","AppBar","position","Tabs","newValue","indicatorColor","textColor","Tab","axis","onChangeIndex","hidden","aria-labelledby","Box","p","subheader","Routes","route","render","routName","drawerWidth","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","justifyContent","padding","mixins","content","flexGrow","MainContainer","location","useLocation","setOpen","CssBaseline","clsx","Toolbar","edge","Typography","noWrap","rout","pathname","Drawer","Divider","to","i","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9813a89d.chunk.js","sourcesContent":["export const ADD_TODO: string = 'ADD_TODO';\r\nexport const REMOVE_TODO: string = 'REMOVE_TODO';\r\nexport const EDIT_TODO: string = 'EDIT_TODO';\r\nexport const CLOSE_TODO_SUB_MENU: string = 'CLOSE_TODO_SUB_MENU';\r\nexport const OPEN_TODO_SUB_MENU: string = 'OPEN_TODO_SUB_MENU';\r\nexport const OPEN_TODO_EDIT_MODE: string = 'OPEN_TODO_EDIT_MODE';\r\nexport const CLOSE_TODO_EDIT_MODE: string = 'CLOSE_TODO_EDIT_MODE';\r\nexport const SORT_TODO_BY: string = 'SORT_TODO_BY';\r\nexport const FINISH_TODO: string = 'FINISH_TODO';\r\n","import * as actionTypes from './actionTypes';\r\nimport {Reducer} from \"redux\";\r\nimport {TTodosState, TTodoActions} from '../types'\r\n\r\nconst initialState: TTodosState = {\r\n    todos: [],\r\n    finishedTodos: []\r\n}\r\n\r\nconst todoReducer: Reducer<TTodosState, TTodoActions> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos,\r\n                    {\r\n                        id: state.todos[0] ? state.todos[state.todos.length - 1].id + 1 : 0,\r\n                        text: action.text,\r\n                        importance: action.importance,\r\n                        isOpenSubMenu: false,\r\n                        isEditMode: false,\r\n                        lastEditDate: Date.now(),\r\n                    },\r\n                ]\r\n            }\r\n        case actionTypes.REMOVE_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(t => t.id !== action.id)\r\n            }\r\n        case actionTypes.OPEN_TODO_SUB_MENU:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isOpenSubMenu: true\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...t,\r\n                            isOpenSubMenu: false,\r\n                            isEditMode: false\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.CLOSE_TODO_SUB_MENU:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isOpenSubMenu: false,\r\n                            isEditMode: false\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.OPEN_TODO_EDIT_MODE:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isEditMode: true\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...t,\r\n                            isEditMode: false\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.CLOSE_TODO_EDIT_MODE:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isEditMode: false\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.EDIT_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            text: action.text,\r\n                            importance: action.importance,\r\n                            isEditMode: false,\r\n                            lastEditDate: Date.now()\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.SORT_TODO_BY:\r\n            if (action.sortType === 'importance') {\r\n                let sortedTodos = [...state.todos.sort((a, b) => a.importance > b.importance ? 1 : -1)];\r\n                return {...state, todos: action.reverse ? sortedTodos.reverse() : sortedTodos}\r\n            }\r\n            if (action.sortType === 'date') {\r\n                let sortedTodos = [...state.todos.sort((a, b) => a.lastEditDate > b.lastEditDate ? 1 : -1)];\r\n                return {...state, todos: action.reverse ? sortedTodos.reverse() : sortedTodos}\r\n            }\r\n            return state\r\n        case actionTypes.FINISH_TODO:\r\n            let todo = state.todos.find(t => t.id === action.id)\r\n            if (todo){\r\n                return {\r\n                    ...state,\r\n                    todos: [...state.todos.filter(todo => todo.id !== action.id)],\r\n                    finishedTodos: [...state.finishedTodos, todo]\r\n                }\r\n            } else return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todoReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport todoReducer from \"./todo-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todo: todoReducer\r\n});\r\n\r\ntype RootReducersType = typeof rootReducers;\r\nexport type GlobalStateType = ReturnType<RootReducersType>\r\n\r\nconst store = createStore(rootReducers);\r\n\r\nexport default store;","import * as actionTypes from './actionTypes'\r\n\r\nexport const addTodo = (text: string, importance: string) => ({type: actionTypes.ADD_TODO,text,importance})\r\nexport const removeTodo = (id: number) => ({type: actionTypes.REMOVE_TODO, id})\r\nexport const openTodoSubMenu = (id:number) => ({type: actionTypes.OPEN_TODO_SUB_MENU, id})\r\nexport const closeTodoSubMenu = (id:number) => ({type: actionTypes.CLOSE_TODO_SUB_MENU, id})\r\nexport const openEditMode = (id:number) => ({type: actionTypes.OPEN_TODO_EDIT_MODE, id})\r\nexport const closeEditMode = (id:number) => ({type: actionTypes.CLOSE_TODO_EDIT_MODE, id})\r\nexport const editTodo = (id:number, text: string, importance: string) => ({type: actionTypes.EDIT_TODO, id, text, importance})\r\nexport const sortTodoBy = (sortType: string, reverse: boolean) => ({type: actionTypes.SORT_TODO_BY, sortType, reverse})\r\nexport const finishTodo = (id: number) => ({type: actionTypes.SORT_TODO_BY, id});\r\n","import React, {useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTodo, closeEditMode, editTodo} from \"../../lib/actions\";\r\nimport {Form} from \"react-final-form\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid, IconButton,\r\n    Radio,\r\n    RadioGroup, Snackbar,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {TTodo} from \"../../types\";\r\n\r\nexport const AddTodoForm: React.FC<{ todo?: TTodo }> = ({todo}) => {\r\n\r\n    const [radioValue, setRadioValue] = useState('1');\r\n    const [openError, setOpenError] = useState(false);\r\n    const [formText, setFormText] = useState(todo ? todo.text : '')\r\n    const dispatch = useDispatch()\r\n\r\n    const addSubmit = () => {\r\n        if (formText.length >= 1) {\r\n            dispatch(addTodo(formText, radioValue))\r\n            setFormText('');\r\n            setRadioValue('1');\r\n        } else {\r\n            setOpenError(true)\r\n        }\r\n    }\r\n\r\n    const editSubmit = () => {\r\n        if (todo) dispatch(editTodo(todo.id, formText, radioValue))\r\n    }\r\n\r\n    const closeError = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenError(false);\r\n    };\r\n\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRadioValue((event.target as HTMLInputElement).value);\r\n    };\r\n\r\n    return <div>\r\n        <Form onSubmit={todo ? editSubmit : addSubmit}>\r\n            {props => (\r\n                <form onSubmit={props.handleSubmit}>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Grid item xs={todo ? 11 : 10}>\r\n                            <TextField\r\n                                name=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                multiline={true}\r\n                                value={formText}\r\n                                onChange={(e) => setFormText(e.target.value)}\r\n                                label={todo ? \"Редактировать\" : \"Добавить в список\"}\r\n                            />\r\n                        </Grid>{todo && <Grid item xs={1}>\r\n                        <Button type='submit' ><SaveIcon/></Button>\r\n                        <Button onClick={()=> dispatch(closeEditMode(todo.id))}><CloseIcon/></Button>\r\n                    </Grid>}\r\n\r\n                        {!todo && <Grid item xs={2}>\r\n                            <Button\r\n                                style={{width: '100%'}}\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                className={''}\r\n                            >Добавить</Button>\r\n                        </Grid>}\r\n                        <Grid item xs={12}>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"flex-end\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={12}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <RadioGroup row={true} name=\"importance\" value={radioValue}\r\n                                                    onChange={handleChange}>\r\n                                            <FormControlLabel value={'1'} control={<Radio style={{color: 'red'}}/>}\r\n                                                              label={\"Важно\"}/>\r\n                                            <FormControlLabel value={'2'} control={<Radio style={{color: 'green'}}/>}\r\n                                                              label={\"Средне\"}/>\r\n                                            <FormControlLabel value={'3'} control={<Radio style={{color: 'grey'}}/>}\r\n                                                              label={\"Неважно\"}/>\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </form>\r\n            )}\r\n        </Form>\r\n\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n            }}\r\n            open={openError}\r\n            autoHideDuration={3000}\r\n            onClose={closeError}\r\n            message=\"Поле не может быть пустым\"\r\n            action={\r\n                <React.Fragment>\r\n                    <Button color=\"secondary\" size=\"small\" onClick={() => setOpenError(false)}>\r\n                        Закрыть\r\n                    </Button>\r\n                    <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setOpenError(false)}>\r\n                        <CloseIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            }\r\n        />\r\n\r\n    </div>\r\n}","import { TypedUseSelectorHook, useSelector as untypedSelector } from 'react-redux';\r\nimport {GlobalStateType} from \"./store\";\r\n\r\n\r\nexport const useSelector: TypedUseSelectorHook<GlobalStateType> = untypedSelector;","import React from 'react';\r\nimport {TTodo} from \"../../types\";\r\nimport {Collapse, Grid, List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\r\nimport {ExpandLess, ExpandMore} from \"@material-ui/icons\";\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {closeTodoSubMenu, finishTodo, openEditMode, openTodoSubMenu, removeTodo} from \"../../lib/actions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AddTodoForm} from \"./AddTodoForm\";\r\n\r\n\r\nexport const SingleTodo: React.FC<{ todo: TTodo }> = ({todo}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const time = new Date(todo.lastEditDate);\r\n\r\n    let importanceColor = '';\r\n    switch (todo.importance) {\r\n        case '1':\r\n            importanceColor = 'red';\r\n            break;\r\n        case '2':\r\n            importanceColor = 'green';\r\n            break;\r\n        case '3':\r\n            importanceColor = 'grey';\r\n            break;\r\n    }\r\n\r\n    return <div>\r\n        <ListItem>\r\n            {!todo.isEditMode\r\n                ? <ListItem\r\n                    button\r\n                    onClick={() => todo.isOpenSubMenu\r\n                        ? dispatch(closeTodoSubMenu(todo.id))\r\n                        : dispatch(openTodoSubMenu(todo.id))\r\n                    }>\r\n                    <ListItemIcon>\r\n                        <Brightness1Icon style={{color: importanceColor}}/>\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={todo.text}/>\r\n                    <div className={'todo-list-item__date'}>\r\n                        <span>\r\n                            {`${time.getDay()}/${time.getMonth()}/${time.getFullYear()}`}\r\n                        </span>\r\n                        <span>\r\n                            {`${time.getHours()}:${time.getMinutes()}`}\r\n                        </span>\r\n                    </div>\r\n                    {todo.isOpenSubMenu\r\n                        ? <ExpandLess/>\r\n                        : <ExpandMore/>\r\n                    }\r\n                </ListItem>\r\n                : <Grid item xs={12}><AddTodoForm todo={todo}/></Grid>\r\n            }\r\n        </ListItem>\r\n\r\n        <Collapse in={todo.isOpenSubMenu} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n                <ListItem>\r\n\r\n                    <ListItem button className={'todo-list-item'}>\r\n                        <CheckCircleOutlineIcon\r\n                            onClick={()=>dispatch(finishTodo(todo.id))}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={'todo-list-item'}\r\n                        onClick={() => {\r\n                            dispatch(closeTodoSubMenu(todo.id))\r\n                            dispatch(openEditMode(todo.id))\r\n                        }}>\r\n                        <CreateIcon/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={'todo-list-item'}\r\n                        onClick={() => dispatch(removeTodo(todo.id))}\r\n                    >\r\n                        <DeleteForeverIcon/>\r\n                    </ListItem>\r\n\r\n                </ListItem>\r\n            </List>\r\n        </Collapse>\r\n\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sortTodoBy} from \"../../lib/actions\";\r\n\r\nexport const SortTodoButton: React.FC<{name: string, sortType: string}> = ({name, sortType}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [isFirstClick, setIsFirstClick] = useState(true)\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={()=>{\r\n                dispatch(sortTodoBy(sortType, isFirstClick));\r\n                setIsFirstClick(!isFirstClick);\r\n            }}>\r\n                <SortIcon/>{name}\r\n            </Button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {AddTodoForm} from './AddTodoForm';\r\nimport {useSelector} from \"../../lib\";\r\nimport {SingleTodo} from './SingleTodo';\r\nimport {\r\n    AppBar,\r\n    createStyles, Grid,\r\n    List,\r\n    Tabs,\r\n    makeStyles,\r\n    Theme,\r\n    Tab, useTheme, Box\r\n} from '@material-ui/core';\r\nimport {SortTodoButton} from \"./SortTodoButton\";\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nfunction a11yProps(index: number) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n);\r\n\r\nexport const TodoListPage = () => {\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index: number) => {\r\n        setValue(index);\r\n    };\r\n\r\n    const todos = useSelector(state => state.todo.todos)\r\n\r\n    return <div>\r\n        <AddTodoForm/>\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"fullWidth\"\r\n                    >\r\n                        <Tab label=\"Текущие\" {...a11yProps(0)} />\r\n                        <Tab label=\"Завершенные\" {...a11yProps(1)} />\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <SwipeableViews\r\n                    axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                    index={value}\r\n                    onChangeIndex={handleChangeIndex}\r\n                >\r\n                        <div\r\n                            hidden={value !== 0}\r\n                            id={`full-width-tabpanel-${0}`}\r\n                            aria-labelledby={`full-width-tab-${0}`}\r\n                        >\r\n                            {value === 0 && (\r\n                                <Box p={3}>\r\n                                    <Grid item xs={12}>\r\n                                        <List\r\n                                            component=\"div\"\r\n                                            aria-labelledby=\"nested-list-subheader\"\r\n                                            subheader={\r\n                                                <Grid container alignItems='center'>\r\n                                                    <Grid item xs={1}>\r\n                                                        <SortTodoButton name={'важность'} sortType={'importance'}/>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={10}/>\r\n                                                    <Grid item xs={1}>\r\n                                                        <SortTodoButton name={'изменен'} sortType={'date'}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            }\r\n                                            className={classes.root}\r\n                                        >\r\n                                            {\r\n                                                todos.map((todo, index) => {\r\n                                                    return <SingleTodo key={index} todo={todo}/>\r\n                                                })\r\n                                            }\r\n                                        </List>\r\n                                    </Grid>\r\n                                </Box>\r\n                            )}\r\n                        </div>\r\n\r\n                </SwipeableViews>\r\n            </div>\r\n\r\n\r\n            <Grid item xs={2}/>\r\n        </Grid>\r\n        <hr/>\r\n    </div>\r\n\r\n}","import React from 'react';\r\nimport {Route} from \"react-router-dom\";\r\nimport {TodoListPage} from \"../Components/TodoPage/TodoListPage\";\r\n\r\nexport const routes = [\r\n    {\r\n        path: \"/todo-list\",\r\n        component: TodoListPage,\r\n        name: \"Список Дел\",\r\n    },\r\n]\r\n\r\nexport const Routes = (route) => {\r\n    return <Route\r\n        path={route.path}\r\n        render={props => (\r\n            <route.component {...props} routName={route.name} routes={route.routes}/>\r\n        )}\r\n    />\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {createStyles, makeStyles, useTheme, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport {Link, Switch, useLocation} from 'react-router-dom';\r\nimport {routes, Routes} from \"../lib/routes\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: 36,\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        drawerOpen: {\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerClose: {\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            overflowX: 'hidden',\r\n            width: theme.spacing(7) + 1,\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: theme.spacing(9) + 1,\r\n            },\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n        },\r\n    }),\r\n);\r\n\r\nexport const MainContainer: React.FC = (props) => {\r\n\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={() => setOpen(true)}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, {\r\n                            [classes.hide]: open,\r\n                        })}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        {routes.find(rout => location.pathname === rout.path)?.name}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={() => setOpen(false)}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n                    {['Список дел'].map(text => (\r\n                        <Link to={'/todo-list'} key={text}>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                    <FormatListNumberedIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={text}/>\r\n                            </ListItem>\r\n                        </Link>\r\n                    ))}\r\n                </List>\r\n                <Divider/>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar}/>\r\n\r\n\r\n                <Switch>\r\n                    {routes.map((route, i) => (\r\n                        <Routes key={i} {...route} />\r\n                    ))}\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}","import {MainContainer} from \"./MainContainer\";\r\n\r\nexport default MainContainer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.scss';\r\nimport store from \"./lib/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport MainContainer from \"./Components\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <MainContainer/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}