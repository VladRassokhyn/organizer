{"version":3,"sources":["lib/actionTypes.ts","lib/todo-reducer.ts","lib/store.ts","lib/actions.ts","Components/TodoPage/AddTodoForm.tsx","lib/hooks.ts","Components/TodoPage/SingleTodo.tsx","Components/TodoPage/SortTodoButton.tsx","Components/TodoPage/TodoListPage.tsx","lib/routes.jsx","Components/MainContainer.tsx","Components/index.tsx","index.js"],"names":["ADD_TODO","REMOVE_TODO","EDIT_TODO","CLOSE_TODO_SUB_MENU","OPEN_TODO_SUB_MENU","OPEN_TODO_EDIT_MODE","CLOSE_TODO_EDIT_MODE","SORT_TODO_BY","FINISH_TODO","initialState","todos","finishedTodos","todoReducer","state","action","type","actionTypes","id","length","text","importance","isOpenSubMenu","isEditMode","lastEditDate","Date","now","deadline","filter","t","map","sortedTodos","dirName","sort","a","b","sortType","reverse","todo","rootReducers","combineReducers","store","createStore","closeTodoSubMenu","AddTodoForm","useState","isDeadline","setIsDeadline","setDeadline","radioValue","setRadioValue","openError","setOpenError","formText","setFormText","dispatch","useDispatch","handleChange","event","target","value","onSubmit","addTodo","props","handleSubmit","className","Grid","container","direction","justify","alignItems","item","xs","TextField","name","fullWidth","variant","multiline","onChange","e","label","Button","onClick","style","width","color","size","FormControl","component","RadioGroup","row","FormControlLabel","control","Radio","Switch","checked","InputLabelProps","shrink","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","reason","message","Fragment","IconButton","aria-label","fontSize","useSelector","untypedSelector","SingleTodo","finished","time","undefined","console","log","importanceColor","ListItem","borderBottom","button","ListItemIcon","ListItemText","primary","getDay","getMonth","getFullYear","getHours","getMinutes","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","disablePadding","finishTodo","SortTodoButton","isFirstClick","setIsFirstClick","sortTodoBy","useStyles","makeStyles","theme","createStyles","root","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","header","paddingRight","routes","path","classes","useTheme","React","setValue","AppBar","position","Tabs","newValue","indicatorColor","textColor","Tab","axis","index","onChangeIndex","Object","keys","dir","hidden","aria-labelledby","Box","p","subheader","i","Routes","route","render","routName","drawerWidth","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","justifyContent","padding","mixins","content","flexGrow","MainContainer","location","useLocation","setOpen","CssBaseline","clsx","Toolbar","edge","Typography","noWrap","find","rout","pathname","Drawer","Divider","to","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cb4d8fb9.chunk.js","sourcesContent":["export const ADD_TODO: string = 'ADD_TODO';\r\nexport const REMOVE_TODO: string = 'REMOVE_TODO';\r\nexport const EDIT_TODO: string = 'EDIT_TODO';\r\nexport const CLOSE_TODO_SUB_MENU: string = 'CLOSE_TODO_SUB_MENU';\r\nexport const OPEN_TODO_SUB_MENU: string = 'OPEN_TODO_SUB_MENU';\r\nexport const OPEN_TODO_EDIT_MODE: string = 'OPEN_TODO_EDIT_MODE';\r\nexport const CLOSE_TODO_EDIT_MODE: string = 'CLOSE_TODO_EDIT_MODE';\r\nexport const SORT_TODO_BY: string = 'SORT_TODO_BY';\r\nexport const FINISH_TODO: string = 'FINISH_TODO';\r\n","import * as actionTypes from './actionTypes';\r\nimport {Reducer} from \"redux\";\r\nimport {ITodosState, TTodoActions} from '../types'\r\n\r\nconst initialState: ITodosState = {\r\n    todos: [],\r\n    finishedTodos: []\r\n}\r\n\r\nconst todoReducer: Reducer<ITodosState, TTodoActions> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos,\r\n                    {\r\n                        id: state.todos[0] ? state.todos[state.todos.length - 1].id + 1 : 0,\r\n                        text: action.text,\r\n                        importance: action.importance,\r\n                        isOpenSubMenu: false,\r\n                        isEditMode: false,\r\n                        lastEditDate: Date.now(),\r\n                        deadline: action.deadline\r\n                    },\r\n                ]\r\n            }\r\n        case actionTypes.REMOVE_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(t => t.id !== action.id)\r\n            }\r\n        case actionTypes.OPEN_TODO_SUB_MENU:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isOpenSubMenu: true\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...t,\r\n                            isOpenSubMenu: false,\r\n                            isEditMode: false\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.CLOSE_TODO_SUB_MENU:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isOpenSubMenu: false,\r\n                            isEditMode: false\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.OPEN_TODO_EDIT_MODE:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isEditMode: true\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...t,\r\n                            isEditMode: false\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.CLOSE_TODO_EDIT_MODE:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            isEditMode: false\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.EDIT_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(t => {\r\n                    if (t.id === action.id) {\r\n                        return {\r\n                            ...t,\r\n                            text: action.text,\r\n                            importance: action.importance,\r\n                            isEditMode: false,\r\n                            lastEditDate: Date.now()\r\n                        }\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.SORT_TODO_BY:\r\n            let sortedTodos = [...state[action.dirName].sort((a, b) => a[action.sortType] > b[action.sortType] ? 1 : -1)];\r\n            return {\r\n                ...state,\r\n                [action.dirName]: action.reverse ? sortedTodos.reverse() : sortedTodos\r\n            }\r\n        case actionTypes.FINISH_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => todo.id !== action.todo.id),\r\n                finishedTodos: [...state.finishedTodos, action.todo]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todoReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport todoReducer from \"./todo-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todo: todoReducer\r\n});\r\n\r\ntype RootReducersType = typeof rootReducers;\r\nexport type GlobalStateType = ReturnType<RootReducersType>\r\n\r\nconst store = createStore(rootReducers);\r\n\r\nexport default store;","import * as actionTypes from './actionTypes'\r\nimport {TTodo} from \"../types\";\r\n\r\nexport const addTodo = (text: string, importance: string, deadline:string) => ({type: actionTypes.ADD_TODO,text,importance,deadline})\r\nexport const removeTodo = (id: number) => ({type: actionTypes.REMOVE_TODO, id})\r\nexport const openTodoSubMenu = (id:number) => ({type: actionTypes.OPEN_TODO_SUB_MENU, id})\r\nexport const closeTodoSubMenu = (id:number) => ({type: actionTypes.CLOSE_TODO_SUB_MENU, id})\r\nexport const openEditMode = (id:number) => ({type: actionTypes.OPEN_TODO_EDIT_MODE, id})\r\nexport const closeEditMode = (id:number) => ({type: actionTypes.CLOSE_TODO_EDIT_MODE, id})\r\nexport const editTodo = (id:number, text: string, importance: string) => ({type: actionTypes.EDIT_TODO, id, text, importance})\r\nexport const sortTodoBy = (sortType: string, reverse: boolean, dirName: string) => ({type: actionTypes.SORT_TODO_BY, sortType, reverse, dirName})\r\nexport const finishTodo = (todo: TTodo) => ({type: actionTypes.FINISH_TODO, todo});\r\n","import React, {useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTodo, closeEditMode, editTodo} from \"../../lib/actions\";\r\nimport {Form} from \"react-final-form\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid, IconButton,\r\n    Radio,\r\n    RadioGroup, Snackbar, Switch,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {TTodo} from \"../../types\";\r\n\r\nexport const AddTodoForm: React.FC<{ todo?: TTodo }> = ({todo}) => {\r\n\r\n    const [isDeadline, setIsDeadline] = useState(false);\r\n    const [deadline, setDeadline] = useState('')\r\n    const [radioValue, setRadioValue] = useState('1');\r\n    const [openError, setOpenError] = useState(false);\r\n    const [formText, setFormText] = useState(todo ? todo.text : '')\r\n    const dispatch = useDispatch()\r\n\r\n    const addSubmit = () => {\r\n        if (formText.length >= 1) {\r\n            dispatch(addTodo(formText, radioValue, deadline || ''))\r\n            setFormText('');\r\n            setRadioValue('1');\r\n        } else {\r\n            setOpenError(true)\r\n        }\r\n    }\r\n\r\n    const editSubmit = () => {\r\n        if (formText !== '') {\r\n            if (todo) dispatch(editTodo(todo.id, formText, radioValue))\r\n        } else {\r\n            setOpenError(true)\r\n        }\r\n    }\r\n\r\n    const closeError = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenError(false);\r\n    };\r\n\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRadioValue((event.target as HTMLInputElement).value);\r\n    };\r\n\r\n    return <div>\r\n        <Form onSubmit={todo ? editSubmit : addSubmit}>\r\n            {props => (\r\n                <form\r\n                    onSubmit={props.handleSubmit}\r\n                    className='todo-list-form'\r\n                >\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Grid item xs={todo ? 11 : 10}>\r\n                            <TextField\r\n                                name=\"text\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                multiline={true}\r\n                                value={formText}\r\n                                onChange={(e) => setFormText(e.target.value)}\r\n                                label={todo ? \"Редактировать\" : \"Добавить в список\"}\r\n                            />\r\n                        </Grid>{todo && <Grid item xs={1}>\r\n                        <Button type='submit' ><SaveIcon/></Button>\r\n                        <Button onClick={()=> dispatch(closeEditMode(todo.id))}><CloseIcon/></Button>\r\n                    </Grid>}\r\n\r\n                        {!todo && <Grid item xs={2}>\r\n                            <Button\r\n                                style={{width: '100%'}}\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                className={''}\r\n                            >Добавить</Button>\r\n                        </Grid>}\r\n                        <Grid item xs={12}>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"flex-end\"\r\n                                alignItems=\"center\"\r\n                                className='todo-list-form__bottom'\r\n                            >\r\n                                <Grid item xs={3}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <RadioGroup\r\n                                            row={true}\r\n                                            name=\"importance\"\r\n                                            value={radioValue}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <FormControlLabel value={'1'} control={<Radio style={{color: 'red'}}/>}\r\n                                                              label={\"Важно\"}/>\r\n                                            <FormControlLabel value={'2'} control={<Radio style={{color: 'green'}}/>}\r\n                                                              label={\"Средне\"}/>\r\n                                            <FormControlLabel value={'3'} control={<Radio style={{color: 'grey'}}/>}\r\n                                                              label={\"Неважно\"}/>\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={1}>\r\n                                    <label>Дедлайн</label>\r\n                                    <Switch\r\n                                        checked={isDeadline}\r\n                                        onChange={()=>setIsDeadline(!isDeadline)}\r\n                                        color=\"primary\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={3}>\r\n\r\n                                    {isDeadline && <TextField\r\n                                        label=\"Дедлайн\"\r\n                                        name='deadline'\r\n                                        type=\"datetime-local\"\r\n                                        InputLabelProps={{shrink: true,}}\r\n                                        onChange={(e)=> setDeadline(e.target.value)}\r\n                                    />\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={5}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </form>\r\n            )}\r\n        </Form>\r\n\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n            }}\r\n            open={openError}\r\n            autoHideDuration={3000}\r\n            onClose={closeError}\r\n            message=\"Поле не может быть пустым\"\r\n            action={\r\n                <React.Fragment>\r\n                    <Button color=\"secondary\" size=\"small\" onClick={() => setOpenError(false)}>\r\n                        Закрыть\r\n                    </Button>\r\n                    <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setOpenError(false)}>\r\n                        <CloseIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            }\r\n        />\r\n\r\n    </div>\r\n}","import { TypedUseSelectorHook, useSelector as untypedSelector } from 'react-redux';\r\nimport {GlobalStateType} from \"./store\";\r\n\r\n\r\nexport const useSelector: TypedUseSelectorHook<GlobalStateType> = untypedSelector;","import React from 'react';\r\nimport {TTodo} from \"../../types\";\r\nimport {Collapse, Grid, List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\r\nimport {ExpandLess, ExpandMore} from \"@material-ui/icons\";\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {closeTodoSubMenu, finishTodo, openEditMode, openTodoSubMenu, removeTodo} from \"../../lib/actions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AddTodoForm} from \"./AddTodoForm\";\r\n\r\n\r\nexport const SingleTodo: React.FC<{ todo: TTodo, finished: boolean }> = ({todo, finished}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const time = new Date(todo.lastEditDate);\r\n    const deadline = todo.deadline ? new Date(todo.deadline) : undefined\r\n\r\n\r\n    console.log(todo.deadline)\r\n\r\n    let importanceColor: string = '';\r\n    switch (todo.importance) {\r\n        case '1':\r\n            importanceColor = 'red';\r\n            break;\r\n        case '2':\r\n            importanceColor = 'green';\r\n            break;\r\n        case '3':\r\n            importanceColor = 'grey';\r\n            break;\r\n    }\r\n\r\n    return <div>\r\n        <ListItem>\r\n            {!todo.isEditMode\r\n                ? <ListItem\r\n                    style={{borderBottom: '1px solid grey'}}\r\n                    button\r\n                    onClick={() => todo.isOpenSubMenu\r\n                        ? dispatch(closeTodoSubMenu(todo.id))\r\n                        : dispatch(openTodoSubMenu(todo.id))\r\n                    }>\r\n                            <ListItemIcon>\r\n                                <Brightness1Icon style={{color: importanceColor}}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={todo.text}/>\r\n\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item xs={1}>\r\n                            <div className={'todo-list-item__date'}>\r\n                        <span>\r\n                            {deadline && `${deadline.getDay()}/${deadline.getMonth()}/${deadline.getFullYear()}`}\r\n                        </span>\r\n                                <span>\r\n                            {deadline && `${deadline.getHours()}:${deadline.getMinutes()}`}\r\n                        </span>\r\n                            </div>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1}>\r\n                            <div className={'todo-list-item__date'}>\r\n                        <span>\r\n                            {`${time.getDay()}/${time.getMonth()}/${time.getFullYear()}`}\r\n                        </span>\r\n                                <span>\r\n                            {`${time.getHours()}:${time.getMinutes()}`}\r\n                        </span>\r\n                            </div>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                    {!finished && <div>\r\n                        {todo.isOpenSubMenu\r\n                            ? <ExpandLess/>\r\n                            : <ExpandMore/>\r\n                        }\r\n                    </div>\r\n                    }\r\n                </ListItem>\r\n                : <Grid item xs={12}><AddTodoForm todo={todo}/></Grid>\r\n            }\r\n        </ListItem>\r\n\r\n        {!finished && <Collapse in={todo.isOpenSubMenu} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n                <ListItem>\r\n\r\n                    <ListItem\r\n                        button\r\n                        className={'todo-list-item'}\r\n                        onClick={() => dispatch(finishTodo(todo))}\r\n                    >\r\n                        <CheckCircleOutlineIcon/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={'todo-list-item'}\r\n                        onClick={() => {\r\n                            dispatch(closeTodoSubMenu(todo.id))\r\n                            dispatch(openEditMode(todo.id))\r\n                        }}>\r\n                        <CreateIcon/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={'todo-list-item'}\r\n                        onClick={() => dispatch(removeTodo(todo.id))}\r\n                    >\r\n                        <DeleteForeverIcon/>\r\n                    </ListItem>\r\n\r\n                </ListItem>\r\n            </List>\r\n        </Collapse>}\r\n\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sortTodoBy} from \"../../lib/actions\";\r\n\r\nexport const SortTodoButton: React.FC<{name: string, sortType: string, dirName:string}> = ({name, sortType, dirName}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [isFirstClick, setIsFirstClick] = useState(true)\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={()=>{\r\n                dispatch(sortTodoBy(sortType, isFirstClick, dirName));\r\n                setIsFirstClick(!isFirstClick);\r\n            }}>\r\n                <SortIcon/>{name}\r\n            </Button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {AddTodoForm} from './AddTodoForm';\r\nimport {useSelector} from \"../../lib\";\r\nimport {SingleTodo} from './SingleTodo';\r\nimport {\r\n    AppBar,\r\n    createStyles, Grid,\r\n    List,\r\n    Tabs,\r\n    makeStyles,\r\n    Theme,\r\n    Tab, useTheme, Box\r\n} from '@material-ui/core';\r\nimport {SortTodoButton} from \"./SortTodoButton\";\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n        header: {\r\n            paddingLeft: '25px',\r\n            paddingRight: '60px'\r\n        }\r\n    }),\r\n);\r\n\r\nexport const TodoListPage = () => {\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n    const state = useSelector(state => state.todo);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index: number) => {\r\n        setValue(index);\r\n    };\r\n\r\n\r\n    return <div>\r\n        <AddTodoForm/>\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                    >\r\n                        <Tab label=\"Текущие\"/>\r\n                        <Tab label=\"Завершенные\"/>\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <SwipeableViews\r\n                    axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                    index={value}\r\n                    onChangeIndex={handleChangeIndex}\r\n                >\r\n                    {Object.keys(state).map((dir, index) => {\r\n                        return <div\r\n                            key={index}\r\n                            hidden={value !== index}\r\n                            id={`full-width-tabpanel-${index}`}\r\n                            aria-labelledby={`full-width-tab-${index}`}\r\n                        >\r\n                            {value === index && (\r\n                                <Box p={3}>\r\n                                    <Grid item xs={12}>\r\n                                        <List\r\n                                            component=\"div\"\r\n                                            aria-labelledby=\"nested-list-subheader\"\r\n                                            className={classes.root}\r\n                                            subheader={\r\n                                                <Grid container alignItems='center' className={classes.header}>\r\n                                                    <Grid item xs={1}>\r\n                                                        <SortTodoButton\r\n                                                            name={'важность'}\r\n                                                            sortType={'importance'}\r\n                                                            dirName={dir}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={9}/>\r\n                                                    <Grid item xs={1}>\r\n                                                        <SortTodoButton\r\n                                                            name={'дедлайн'}\r\n                                                            sortType={'deadline'}\r\n                                                            dirName={dir}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={1}>\r\n                                                        <SortTodoButton\r\n                                                            name={'изменен'}\r\n                                                            sortType={'lastEditDate'}\r\n                                                            dirName={dir}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            }\r\n                                        >\r\n                                            {\r\n                                                state[dir].map((todo, i) => {\r\n                                                    return <SingleTodo key={i} finished={index === 1} todo={todo}/>\r\n                                                })\r\n                                            }\r\n                                        </List>\r\n                                    </Grid>\r\n                                </Box>\r\n                            )}\r\n                        </div>\r\n                    })\r\n\r\n                    }\r\n\r\n                </SwipeableViews>\r\n            </div>\r\n\r\n\r\n            <Grid item xs={2}/>\r\n        </Grid>\r\n        <hr/>\r\n    </div>\r\n\r\n}","import React from 'react';\r\nimport {Route} from \"react-router-dom\";\r\nimport {TodoListPage} from \"../Components/TodoPage/TodoListPage\";\r\n\r\nexport const routes = [\r\n    {\r\n        path: \"/todo-list\",\r\n        component: TodoListPage,\r\n        name: \"Список Дел\",\r\n    },\r\n]\r\n\r\nexport const Routes = (route) => {\r\n    return <Route\r\n        path={route.path}\r\n        render={props => (\r\n            <route.component {...props} routName={route.name} routes={route.routes}/>\r\n        )}\r\n    />\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {createStyles, makeStyles, useTheme, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport {Link, Switch, useLocation} from 'react-router-dom';\r\nimport {routes, Routes} from \"../lib/routes\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: 36,\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        drawerOpen: {\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerClose: {\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            overflowX: 'hidden',\r\n            width: theme.spacing(7) + 1,\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: theme.spacing(9) + 1,\r\n            },\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n        },\r\n    }),\r\n);\r\n\r\nexport const MainContainer: React.FC = (props) => {\r\n\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={() => setOpen(true)}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, {\r\n                            [classes.hide]: open,\r\n                        })}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        {routes.find(rout => location.pathname === rout.path)?.name}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={() => setOpen(false)}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n                    {['Список дел'].map(text => (\r\n                        <Link to={'/todo-list'} key={text}>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                    <FormatListNumberedIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={text}/>\r\n                            </ListItem>\r\n                        </Link>\r\n                    ))}\r\n                </List>\r\n                <Divider/>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar}/>\r\n\r\n\r\n                <Switch>\r\n                    {routes.map((route, i) => (\r\n                        <Routes key={i} {...route} />\r\n                    ))}\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}","import {MainContainer} from \"./MainContainer\";\r\n\r\nexport default MainContainer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.scss';\r\nimport store from \"./lib/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport MainContainer from \"./Components\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <MainContainer/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}